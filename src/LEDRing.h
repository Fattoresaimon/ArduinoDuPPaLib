//
//    FILE: LEDRing.h
// VERSION: 1.2..
// PURPOSE: Library for LEDRing from DUPPA. chip used  IS31FL3745
// LICENSE: GPL v3 (http://www.gnu.org/licenses/gpl.html)
//
// DATASHEET: https://www.lumissil.com/assets/pdf/core/IS31FL3745_DS.pdf
//
//     URL:
//
// AUTHOR:
// Simone Caron
//

#ifndef LEDRing_H
#define LEDRing_H

#if (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#define ISSI3745_PAGE0 0x00
#define ISSI3745_PAGE1 0x01
#define ISSI3745_PAGE2 0x02

#define ISSI3745_COMMANDREGISTER 0xFD
#define ISSI3745_COMMANDREGISTER_LOCK 0xFE
#define ISSI3745_ULOCK_CODE 0xC5

#define ISSI3745_CONFIGURATION 0x00
#define ISSI3745_GLOBALCURRENT 0x01
#define ISSI3745_PULLUPDOWM 0x02
#define ISSI3745_OPENSHORT 0x03
#define ISSI3745_TEMPERATURE 0x24
#define ISSI3745_SPREADSPECTRUM 0x25
#define ISSI3745_RESET_REG 0x2F


#define ISSI3745_SJ1 0b0100000
#define ISSI3745_SJ2 0b0100001
#define ISSI3745_SJ3 0b0100010
#define ISSI3745_SJ4 0b0100011
#define ISSI3745_SJ5 0b0100000
#define ISSI3745_SJ6 0b0100100
#define ISSI3745_SJ7 0b0101000
#define ISSI3745_SJ8 0b0101100





class LEDRing {
  public:

    LEDRing(uint8_t add);
    void LEDRing_PWM_MODE(void);
    void LEDRing_Configuration(uint8_t conf);
    void LEDRing_SetScaling(uint8_t led_n, uint8_t scal);
    void LEDRing_SetScaling(uint8_t scal);
    void LEDRing_GlobalCurrent(uint8_t curr);
    void LEDRing_PULLUP_DOWN(uint8_t pull);
    uint8_t LEDRing_Temperature(void);
    void LEDRing_SpreadSpectrum(uint8_t spread);
    void LEDRing_Reset(void);

    void LEDRing_Set_RGB(uint8_t led_n, uint32_t color);
    void LEDRing_Set_RED(uint8_t led_n, uint8_t color);
    void LEDRing_Set_GREEN(uint8_t led_n, uint8_t color);
    void LEDRing_Set_BLUE(uint8_t led_n, uint8_t color);
    void LEDRing_ClearAll(void);

  private:
    const uint8_t issi_led_map[3][48] = {
      {0x12, 0x24, 0x36, 0x48, 0x5A, 0x6C, 0x7E, 0x90, 0xF, 0x21, 0x33, 0x45, 0x57, 0x69, 0x7B, 0x8D, 0xC, 0x1E, 0x30, 0x42, 0x54, 0x66, 0x78, 0x8A, 0x9, 0x1B, 0x2D, 0x3F, 0x51, 0x63, 0x75, 0x87, 0x6, 0x18, 0x2A, 0x3C, 0x4E, 0x60, 0x72, 0x84, 0x3, 0x15, 0x27, 0x39, 0x4B, 0x5D, 0x6F, 0x81}, // Red
      {0x11, 0x23, 0x35, 0x47, 0x59, 0x6B, 0x7D, 0x8F, 0xE, 0x20, 0x32, 0x44, 0x56, 0x68, 0x7A, 0x8C, 0xB, 0x1D, 0x2F, 0x41, 0x53, 0x65, 0x77, 0x89, 0x8, 0x1A, 0x2C, 0x3E, 0x50, 0x62, 0x74, 0x86, 0x5, 0x17, 0x29, 0x3B, 0x4D, 0x5F, 0x71, 0x83, 0x2, 0x14, 0x26, 0x38, 0x4A, 0x5C, 0x6E, 0x80}, //Green
      {0x10, 0x22, 0x34, 0x46, 0x58, 0x6A, 0x7C, 0x8E, 0xD, 0x1F, 0x31, 0x43, 0x55, 0x67, 0x79, 0x8B, 0xA, 0x1C, 0x2E, 0x40, 0x52, 0x64, 0x76, 0x88, 0x7, 0x19, 0x2B, 0x3D, 0x4F, 0x61, 0x73, 0x85, 0x4, 0x16, 0x28, 0x3A, 0x4C, 0x5E, 0x70, 0x82, 0x1, 0x13, 0x25, 0x37, 0x49, 0x5B, 0x6D, 0x7F} //Blue
    };

    uint8_t _add;
    void  selectBank(uint8_t b);
    void  writeRegister8(uint8_t reg, uint8_t data);
    void  writeBuff(uint8_t reg, uint8_t *data, uint8_t dim);
    uint8_t readRegister8(uint8_t reg);
};
#endif
